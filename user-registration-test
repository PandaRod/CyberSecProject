import unittest
from unittest.mock import patch, Mock
import requests
from datetime import datetime

def feed_data(data_type):
    """
    Prepare API parameters based on the requested data type.
    """
    if data_type == "geo":
        return {
            "format": "json",
            "list": "geosearch",
            "gscoord": "29.886829786|-97.93666292",
            "gslimit": "10",
            "gsradius": "10000",
            "action": "query"
        }
    elif data_type == "date":
        return datetime.today()
    elif data_type == "user":
        return {
            "action": "query",
            "meta": "userinfo",
            "uiprop": "rights",
            "format": "json"
        }
    else:
        raise ValueError("Invalid data type")

def saint_algorithm(input_data, session=None):
    """
    Handles API queries based on the input type.
    """
    session = session or requests.Session()
    if input_data == "geosearch":
        params = feed_data("geo")
        response = session.get("https://en.wikipedia.org/w/api.php", params=params)
        return response.json()
    elif input_data == "date":
        return feed_data("date")
    elif input_data == "user":
        params = feed_data("user")
        response = session.get("https://en.wikipedia.org/w/api.php", params=params)
        return response.json()
    else:
        raise ValueError("Invalid input")

class TestFeedData(unittest.TestCase):
    def test_feed_data_geo(self):
        expected = {
            "format": "json",
            "list": "geosearch",
            "gscoord": "29.886829786|-97.93666292",
            "gslimit": "10",
            "gsradius": "10000",
            "action": "query"
        }
        self.assertEqual(feed_data("geo"), expected)

    def test_feed_data_date(self):
        self.assertIsInstance(feed_data("date"), datetime)

    def test_feed_data_user(self):
        expected = {
            "action": "query",
            "meta": "userinfo",
            "uiprop": "rights",
            "format": "json"
        }
        self.assertEqual(feed_data("user"), expected)

    def test_feed_data_invalid(self):
        with self.assertRaises(ValueError):
            feed_data("invalid")


class TestSaintAlgorithm(unittest.TestCase):
    @patch("requests.Session.get")
    def test_saint_algorithm_geosearch(self, mock_get):
        mock_response = Mock()
        mock_response.json.return_value = {"query": {"geosearch": []}}
        mock_get.return_value = mock_response

        result = saint_algorithm("geosearch")
        self.assertIn("query", result)
        self.assertIn("geosearch", result["query"])

    @patch("requests.Session.get")
    def test_saint_algorithm_user(self, mock_get):
        mock_response = Mock()
        mock_response.json.return_value = {"query": {"userinfo": {}}}
        mock_get.return_value = mock_response

        result = saint_algorithm("user")
        self.assertIn("query", result)
        self.assertIn("userinfo", result["query"])

    def test_saint_algorithm_date(self):
        result = saint_algorithm("date")
        self.assertIsInstance(result, datetime)

    def test_saint_algorithm_invalid(self):
        with self.assertRaises(ValueError):
            saint_algorithm("invalid")


if __name__ == '__main__':
    unittest.main()

